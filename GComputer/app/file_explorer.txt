local app = {}

app.title = "Explorer"
app.version = 1.1
app.author = "Neker's Industry's"
app.description = "Show folder contents"

app.pos = Vector(60,60)
app.size = Vector(500, 400)
app.minimum_size = Vector(500, 400)
app.maximum_size = Vector(4096, 4096)

app.draggable = true
app.close_btn = true
app.resizable = true

app.multiple_open = true
app.app_id = "gcomputer_fileexplorer"

app.reload_list = function(window,app)
    for id, child in pairs(window.children) do
        if child.id == "folder_file" then
            window.children[id] = nil
        end
    end
    window.folder_file = {}
    window.folder_list = {}

    if window.folder_history[window.folder_history_id] then window.folder_list = load_folder_content(window.folder_history[window.folder_history_id] .. "*") end
    window.search_path.text = window.folder_history[window.folder_history_id]

    if window.folder_list then
        for id, file in pairs(window.folder_list) do
            window.folder_file[id] = SFUi.button(window, Vector(5,20 + 20), Vector(70, 20), file.name, function(me)
                if me.file_info.type == "folder" then
                    window.folder_path = window.folder_history[window.folder_history_id] .. file.name .. "/"
                    table.insert(window.folder_history,window.folder_path)
                    window.folder_history_id = #window.folder_history
                    app.reload_list(window,app)
                else
                    local openned_app = {}
                    if me.is_custom_code then
                        openned_app = me.open_app
                    else
                        openned_app = computer.open_app(me.open_app)
                        computer.file_type.on_open(me,openned_app)
                    end
                end
            end)
            window.folder_file[id].id = "folder_file"
            window.folder_file[id].file_content = file.content
            window.folder_file[id].paint = function(self)
                if self.hover then
                    render.setColor(Color(255,255,255,50))
                    render.drawRect(self.mins.x, self.mins.y, self.size.x, self.size.y)
                end

                if type(self.app) == "table" then self.app.app_logo(self.app,self.mins.x+2,self.mins.y+2,self.size.y-4,self.size.y-4) end
                render.setColor(self.action.held and Color(0,0,0) or self.palette.foreground)

                self.show_name = ""
                for i=1, #self.text do
                    if render.getTextSize(self.show_name) > self.size.x-300 then
                        self.show_name = self.show_name .. "..."
                        break
                    end
                    self.show_name = self.show_name .. self.text[i]
                end

                render.drawSimpleText(self.mins.x + 30, self.center.y, self.show_name, TEXT_ALIGN.LEFT, TEXT_ALIGN.CENTER)
                if self.file_content then render.drawSimpleText(self.mins.x + self.size.x - 10 - 100, self.center.y, os.date("%d/%m/%Y %H:%M",self.modification_time), TEXT_ALIGN.RIGHT, TEXT_ALIGN.CENTER) end
                if self.file_content then render.drawSimpleText(self.mins.x + self.size.x - 10, self.center.y, string.niceSize(#self.file_content), TEXT_ALIGN.RIGHT, TEXT_ALIGN.CENTER) end
            end
            table.merge(window.folder_file[id],computer.file_type.load_from_type(file,window,window.folder_file[id]))
        end
    end
end

app.on_load = function(window,app)
    window.folder_history = {}
    window.folder_history_id = 0
    window.return_btn = SFUi.button(window, Vector(5,15 + 5), Vector(20, 20), "", function(me)
        if window.folder_history_id > 1 then
            window.folder_history_id = window.folder_history_id - 1
            app.reload_list(window,app)
        end
    end)
    window.next_btn = SFUi.button(window, Vector(5 + 22,15 + 5), Vector(20, 20), "", function(me)
        if window.folder_history_id < #window.folder_history then
            window.folder_history_id = window.folder_history_id + 1
            app.reload_list(window,app)
        end
    end)
    window.return_btn.paint = function(self)
        if self.hover then
            render.setColor(Color(255,255,255,50))
            render.drawRect(self.mins.x, self.mins.y, self.size.x, self.size.y)
        end
        
        render.setFilterMag(1)
        render.setFilterMin(1)
        if window.folder_history_id > 1 then render.setColor(Color(255,255,255)) else render.setColor(Color(150,150,150)) end
        render.setMaterial(computer.icon["arrow_undo"])
        render.drawTexturedRect(self.mins.x+2, self.mins.y+2, self.size.x-4, self.size.y-4)
        render.setMaterial()
        render.setFilterMag(3)
        render.setFilterMin(3)
    end
    window.next_btn.paint = function(self)
        if self.hover then
            render.setColor(Color(255,255,255,50))
            render.drawRect(self.mins.x, self.mins.y, self.size.x, self.size.y)
        end
        
        render.setFilterMag(1)
        render.setFilterMin(1)
        if window.folder_history_id < #window.folder_history then render.setColor(Color(255,255,255)) else render.setColor(Color(150,150,150)) end
        render.setMaterial(computer.icon["arrow_redo"])
        render.drawTexturedRect(self.mins.x+2, self.mins.y+2, self.size.x-4, self.size.y-4)
        render.setMaterial()
        render.setFilterMag(3)
        render.setFilterMin(3)
    end
    
    window.search_path = SFUi.textbox(window, Vector(5+40+5,15 + 5), Vector(150, 20), "Search path", "", function(search)
        window.folder_path = search
        table.insert(window.folder_history,search)
        window.folder_history_id = #window.folder_history
        app.reload_list(window,app)
    end)
    window.search_path.paint = function(self)
        render.setColor(self.active and self.typing and Color(255,255,255,50) or Color(255,255,255,10))
        render.drawRect(self.mins.x, self.mins.y, self.size.x, self.size.y)

        if self.trimmed.text == "" and self.active then
            render.setColor(Color(200,200,200))
            render.drawSimpleText(self.mins.x + 10, self.center.y, "Use chat to write something", nil, TEXT_ALIGN.CENTER)
        else
            render.setColor(usehint and self.palette.contrast or self.palette.foreground)
            render.drawSimpleText(self.mins.x + 10, self.center.y, (usehint and not self.hover) and self.trimmed.hint or self.trimmed.text, nil, TEXT_ALIGN.CENTER)
        end  
    end
    
    window.pos = computer.resolution/2 - window.size/2
    timer.simple(0.01,function()
        table.insert(window.folder_history,window.folder_path)
        window.folder_history_id = #window.folder_history
        app.reload_list(window,app)
    end)
end

app.app_logo = function(app,x,y,w,h)
    render.setFilterMag(1)
    render.setFilterMin(1)

    render.setColor(Color(255,255,255))
    render.setMaterial(computer.icon["folder"])
    render.drawTexturedRect(x,y,w,h)
    render.setMaterial()

    render.setFilterMag(3)
    render.setFilterMin(3)
end
    
//use only if you need to draw another thing that not in SFUi lib
//Like a simple rect, roundedbox or polygon etc..
app.add_render = function(window,app,x,y,w,h)
    if window.file_info and window.file_info.type == "folder" then
        render.setColor(Color(255,255,255))
        window.search_path.pos = Vector(w-window.search_path.size.x-5,15+5)
        window.search_path.size.x = w-40-20

        if window.folder_file then
            for id, btn in pairs(window.folder_file) do
                btn.pos = Vector(5,20 + id * btn.size.y+2)
                btn.size.x = w-10
                
                if 20 + id * btn.size.y+2 > window.size.y-30 then
                    break
                end
            end
        end
    end
end
    
return app